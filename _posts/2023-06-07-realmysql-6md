---
layout: post
title:  "RealMySQL - 5"
date:   2023-06-07 23:20:21 +0900
categories: db, mysql
---

> RealMySQL

# 실행계획
> MySQL에서는 Explain이라는 명령으로 쿼리의 실행계획을 확인할 수 있는데, 여기에는 많은 정보가 출력된다. DBMS에서는 쿼리를 최적으로 실행하기 위해 각 테이블의 데이터가 어떤 분포로 저장되어 있는지 통계정보를 참조하며, 그러한 기본 데이터를 비교해 최적의 실행 계획을 수립하는 작업이 필요하다 => 옵티마이저

## 실행 계획 분석 시 주의사항
1. SELECT_type 주의사항
- DERIVED
    - FROM 절에서 사용된 서브쿼리로부터 발생한 임시테이블을 의미
    - 임시테이블은 메모리에 저장될수도 있고 디스크에 저장될 수 있다.
- UNCACHEABLE SUBQUERY
    - 쿼리의 FROM 절 이외의 부분에서 사용하는 서브쿼리는 가능하면 MySQL 옵티마이저가 최대한 캐시되어 재사용 될 수 있게 유도한다. 하지만 사용자 변수나 일부 함수가 사용되는 경우에는 캐싱을 사용할 수 없다.
- DEPENDENT SUBQUERY
    - 쿼리의 from 절 이외의 부분에서 사용되는 서브쿼리가 자체적으로 실행되지 못하고, 외부 쿼리에서 값을 전달받아 실행되는 경우 DEPENDENT SUBQUERY가 표시된다.
    - 이는 서브 쿼리거 먼저 실행되지 못하고 서브 쿼리가 외부 쿼리의 결과 값에 의존적이기 때문에 전체 쿼리의 성능을 느리게 만든다.
    - 서브쿼리가 불필요하게 외부 쿼리의 값을 전달받고 있는지 검토해서, 가능하다면 외부쿼리의 의존성을 제거하는것이 좋다.

2. Type 칼럼의 주의 대상
- ALL, index
    - index는 풀 인덱스 스캔을 의미, ALL은 풀 테이블 스캔을 의미
    - 새로운 인덱스를 추가하거나, 쿼리의 요건을 변경하는 것이 좋다.

3. key 칼럼의 주의 대상
- 쿼리가 인덱스를 사용하지 못할 때 실행 계획의 key 컬럼에 아무값도 표시되지 않는다. 쿼리가 인덱스를 사용할 수 있도록 인덱스를 추가하거나, where 조건을 변경하는 것이 좋다.

4. Rows 컬럼의 주의 대상
- 쿼리가 실제 가져오는 레코드 수보다 훨씬 더 큰 값이 Rows 컬럼에 표시되는 경우에는 쿼리가 인덱스를 정상적으로 사용하고 있는지, 그리그 그 인덱스가 충분히 작업 범위를 좁혀 줄 수 있는 컬럼으로 구성됐는지 검토하는것이 좋다.
- Rows 칼럼의 수치를 판단할 때 주의해야할 점은 LIMIT 포함된 쿼리라 하더라도 LIMIT의 제한은 ROWS 컬럼의 고려대상에서 제외된다. => LIMIT 1 로 1건만 SELECT하는 쿼리라 하더라도 Rows 컬럼에는 훨씬 큰 수치가 나타날 수 있으며 최적화된 쿼리일 수 있다.

5. Extra 컬럼의 주의 대상
- 쿼리가 요건을 제대로 반영하고 있는지 확인해야하는 경우 
    - Full scan on null key
    - impossible having
    - impossible where
    - impossible where noticed after reading cost tables
    - no matching max/min
    - no matching row in const table
    - unique row not found
        - > 위의 내용들은 버그가능성이 있을 지 집중적으로 검토하는것이 좋다.
- 쿼리의 실행 계획이 좋지 않은 경우
    - Range checked for each record
    - using filesort
    - using join buffer
    - using temporary
    - using where
        - > 쿼리를 먼저 최적화 할 수 있는지 확인, 만약 실행계획의 Rows 칼럼의 값과 실제 select 되는 레코드의 수의 차이를 최대한 줄이는 것이 중요하다. 쿼리의 실행계획에서 이러한 문구가 사라질 수 있으면 최선이다.
- 쿼리의 실행계획이 좋은 경우
    - Distinct
    - Using index
    - Using index for group-by
        - > 최적화되어 처리되고 있다.


# 쿼리작성 및 초기화

### SQL 모드
> sql_mode 라는 시스템 설정에는 여러 개의 값이 동시에 설정될 수 있다. SQL 작성과 결과에 영향을 미치는 값들이 있고, sql_mode를 설정할 때는 구분자 콤마를 이용해 동시에 설정이 가능하다

* STRICT_ALL_TABLES
    - 저장하려는 값의 길이가 컬럼의 길이보다 더 긴 경우라도 에러가 발생하지 않는다. 컬럼의 길이를 초과하는 부분은 버리고 저장가능한 길이만큼 저장한다. 이 설정이 적용되면 길이가 초과되면 에러가 발생하며, 쿼리는 중지된다.
* STRICT_TRANS_TABLES
    - 컬럼의 타입과 호환되지 않는 값을 저장할 때, MYSQL 서버는 최대한 비슷한 값으로 바꿔서 저장하려고 한다. 이 설정을 하면 호환되지 않는 값이 저장되면 에러가 발생한다.
* TRADITIONAL
    - 위의 설정과 비슷하지만, 좀 더 엄격한 방법으로 SQL 작동을 제어한다. 위의 3개의 포함된 설정들은 ANSI 표준모드로 작동하도록 유도한다.
* ANSI_QUOTES
    - MySQL에서는 문자열을 표현하기 위해 홀따움표와, 쌍따옴표를 동시에 사용할 수 있다. 오라클과 같은 디비는 홀 따움표는 문자열을 표기하는데 사용되고, 쌍따움표는 컬럼 명이나 테이블 명과 같은 식별자를 구분하는 용도로 사용된다. -> 다 같이 사용하면 혼란을 야기하기 때문에, 이 설정은 홀 따움표만 문자열 값만 표기로 사용할 수 있고, 컬럼명이나 테이블명와 같은 식별자를 쌍따옴표로 표시한다.
* ONLY_FULL_GROUP_BY
    - 그룹바이 절에 포함되지 않은 컬럼이라도 집합함수의 사용 없이 그대로 SELECT 절이나 HAVING 절에 사용할 수 있다. SQL 표준이나 다른 DB와는 다른 동작방식이다. 이 설정을하면 좀 더 엄격한 규칙을 적용한다.
* PIPE_AS_CONTACT
    - "||"는 OR 연산자로 사용된다. 이 설정값을 사용하면 CONCAT 연산자로 사용할 수 있다(oracle)
* PAD_CHAR_TO_FULL_LENGTH
    - CHAR 타입이라 하더라도 VARCHAR와 같이 무효 문자열 뒤의 공백문자는 제거되어 반환된다. 이는 주로 어플리케이션 개발자에게 민감한 부분인대, MySQL에서 불필요한 공백문자를 제거하면 더 편리한 것일 수 있다. 하지만 CHAR 타입의 컬럼을 가져오는 경우, 뒤쪽의 공백이 제거되지 않고 반한돼야한다.그럴 때 이 설정을 하면 된다.
* NO_BACKSLASH_ESCAPES
    - 프로그래밍 언어처럼 백 슬래쉬를 문자 이스케이프 문자로 사용할 수 있다. 이 설정을 추가하면 이스케이프 용도로 사용할 수 없다. 다른 문자와 동일하게 취급된다.
* IGNORE_SPACE
    - 스토어드 프로시저나 함수의 이름뒤에 공백이 있으면, "스토어드 프로시저나 함수가 없습니다." 라는 에러가 출력될 수 있다. MySQL에서는 공백까지 이름으로 간주한다. 이 설정을 추가하면 공백을 무시한다.
* ANSI
    - MySQL 서버가 최대한 SQL 표준에 맞게 동작하게 만들어준다.

### 영문 대소문자 구분
> MySQL 서버는 설치된 운영체제에 따라 테이블명의 대소문자를 구분한다. MySQL의 이비나 테이블이 디스크의 디렉터리나 파일로 맵핑되기 때문이다. MySQL 서버의 설정파일에 "lower_case_table_names" 시스템 변수를 설정하면 구분하지 않는다.

### 매뉴얼의 SQL 문법 표기를 읽는 방법
```sql
  INSERT [LOW_PRIORITY | DELAYED | HIGHPRIORITY ] [IGNORE]  
    [INTO] tbl_name
    SET col_name  = {expr | DEFAULT} ...
    [ON DUPLICATE  KEY UPDATE
        col_name = expr
        [, col_name = expr]....]
```
- 대괄호[]는 선택사항 파이프|는 단어 하나만 선택할 수 있다.
- 중괄호{}는 괄호 내의 아이템중에서 반드시 하나를 사용해야 하는 경우이다.
- ... 표기는 앞에 명시된 키워드나 표현식의 조합이 반복될 수 있음을 의마한다.

### 숫자
> 원칙적으로 숫자 값은 숫자 타입만 저장해야한다.

- 문자열 형태로 따움표('11') 사용하더라도 비교 값이 숫자 값이거나 숫자 컬럼이면 자동 변환해준다.
- 문자 컬럼인대 숫자 값이 주어지면, 문자열 컬럼을 숫자로 변환하여 비교한다. 문자열 컬럼의 모든 문자열 값을 숫자로 변환하여 인덱스를 활용하지 못한다.

### 날짜
> MySQL에서는 정해진 형태의 날짜 포맷으로 표기하면 MySQL 서버가 자동으로 DATE, DATETIME 값으로 변환해준다.

```sql
select * from dept_emp where from_date = '2021-04-24';
select * from dept_emp where from_date = str_to_date('2021-04-24', '%y-%m-%d);
```
- 두 쿼리의 차이점은 거의 없다.

### 불리언
> BOOL 이나 BOOLEAN이라는 타입이 있지만 TINYINT 타입에 대한 동의어다. MySQL에서는 TRUE, FALSE로 저장할 수 있다. TRUE(1),FALSE(2) 로 매핑이 된다.
- 모든 숫자 값이 TRUE, FALSE 두 개의 불리언 값으로 매핑되지 않는것은 어플리케이션에 큰 혼동을 줄 수 있으므로, ENUM 타입을 고려하자.

### 연산자
* 동등비교 (equal)
    - "<=>" 연산자는 "="와 같으며 부가적으로 NULL 값에 대한 비교까지 수행한다. 이 연산자를 NULL-safe 비교 연산자라고한다.
    - IS NULL 연산자 이외에는 널을 비교할 방법이 없는대, <=> 를 통해 가능하다.
* 부정 비교
    - != , <> 를 많이 사용하지만 통일해서 사용하는 것이 좋.
* NOT 연산자
    - 연산의 결과를 반대로 만드는 연산자를 NOT을 사용한다. "!", NOT
* AND(&&) or OR(||)
* REGEXP 연산자
    - 정규표현식을 적용할 수 있으며, 조건의 비교는 인덱스 레인지 스캔을 사용할 수 없다. 따라서 WHERE 조건절에 단독으로 사용하는것은 좋지않고, 가능하다면 범위를 줄일 수 있는 조건과 함께 사용하는 것이 좋다.
* LIKE 연산자
    - 인덱스를 이용하여 처리할 수 있다.
    - 와일드카드(_,%)가 검색어의 앞쪽에 있다면 인덱스 레인지 스캔을 활용할 수 없지만, 뒤에 있다면 가능하다.
        - LIKE 'Ch%' O
        - LIKE '%CH' X
* BETWEEN 연산자
    - 크거나 같다, 작거나 같다 두 개의 연산자를 합친 것
    - 실제 연산자와 다르지 않다.
    - 인덱스 레인지스캔을 쓰지만, 범위가 크다면 IN도 고려해볼 수 있다.
* IN 연산자
    - 여러 개의 값에 대해 동등 비교 연산을 수행하는 연산이다.
    - IN 연산자에 상수값을 전달하는 경우에는 최적화가 가능하다.
    - 서브 쿼리인 경우 상당히 느릴 수 있다.
        - 서브쿼리가 먼저 실행되어 그 결과 값이 IN의 상수로 전달되는 것이 아니라, 서브쿼리의 외부가 먼저 실행되고 IN(서브쿼리)는 체크 조건으로 사용되어 기대와 달리 느릴 수 있다.


