---
layout: post
title:  "RealMySQL - 3"
date:   2023-05-13 23:20:21 +0900
categories: db, mysql
---

> RealMySQL

# 실행계획
> MySQL에서는 Explain이라는 명령으로 쿼리의 실행계획을 확인할 수 있는데, 여기에는 많은 정보가 출력된다. DBMS에서는 쿼리를 최적으로 실행하기 위해 각 테이블의 데이터가 어떤 분포로 저장되어 있는지 통계정보를 참조하며, 그러한 기본 데이터를 비교해 최적의 실행 계획을 수립하는 작업이 필요하다 => 옵티마이저

### 쿼리 실행 절차
- 사용자로부터 요청된 SQL 문장을 잘개 쪼개서 MySQL 서버가 이해할 수 있는 수준으로 분리한다.
- SQL의 파싱 정보(파스트리)를 확인하면서 어떤 테이블부터 읽고 어떤 인덱스를 이용해 테이블을 읽을지 선택한다.
- 두 번째 단계에서 결정된 테이블의 읽기 순서나 선택된 인덱스를 이용해 스토리지 엔진으로부터 데이터를 가져온다.
- 첫번째 단계
    - `SQL 파싱`, SQL 파서라는 모듈로 처리를 하고 쿼리가 잘못되었다면 이 단계에서 걸러진다.
- 두번째 단계
    - `최적화 및 실행 계획 수립`, 옵티마이저에서 처리
    - 불필요한 조건의 제거 및 복잡한 연산 단순화
    - 여러 테이블의 조인이 있는경우 어떤 순서로 테이블을 읽을지 결정
    - 각 테이블에 사용된 조건과 인덱스 통계정보를 이용해 사용할 인덱스 결정
    - 가져온 레코드들을 임시 테이블에 넣고 다시 한번 가공해야하는지 결정
- 세번째 단계
    - 수립된 실행 계획대로 스토리지 엔진에 레코드를 읽어오도록 요청하고, MySQL 엔진에서는 스토리지 엔지으로부터 받은 레코드를 조인하고 정렬하는 작업을 수행한다.

### 옵티마이저의 종류
- 디비 서버에서 두뇌 역할
- 비용기반 최적화
    - 쿼리르 처리하기 위한 여러가지 가능한 방법을 만들고, 각 작업 단위의 비용정보와 대상 테이블의 예측된 통계정보를 이용해 각 실행 계획별 비용을 산출한다. 산출된 각 실행 방법별로 최소 비용이 소요되는 처리 방식을 선택해 최종 쿼리를 실행한다.
- 규칙 기반 최적화
    - 대상 테이블의 레코드 건수나 선택도 등을 고려하지 않고 옵티마이저에 내장된 우선순위에 따라 실행 계획을 수립한다. 같은 쿼리는 항상 실행계획도 비슷하다. 
- 대부분의 RDBMS는 비용 기반 최적화를 사용한다.

### 통계정보
- 비용 기반 최적화에서 가장 중요한 것은 통계정보이다. 통계정보가 정확하지 않다면 엉뚱한 방향으로 쿼리를 실행해버린다.
    - 예를들어, 1억 건의 레코드가 저장된 테이블의 통계정보가 갱신되지 않아, 레코드가 10건 미만인것처럼 되었다면, 옵티마이저는 실제 쿼리 실행 시 인덱스레인지 스캔이 아니라 풀 스캔으로 실행해버릴 수도 있다.
- Mysql에서 관리되는 통계정보는 대략의 레코드 건수와 인덱스의 유니크한 값의 개수 정보가 전부이다.
    - 오라클같은 디비는 통계정보가 상당히 정적이고 수집에 많은 시간이 소요되기때문에 백업하기도 한다.
- Mysql에서는 사용자가 알아채지 못하는 순간순간 자동으로 변경되기 때문에 상당히 동적이다. 하지만 레코드 수가 많지 않다면 통계정보가 상당히 부정확한 경우가 많으므로 `ANALIZE` 명령을 이용해 강제적으로 통계정보를 업데이트해야할 떄가 있다.

### 실행계획분석
- `EXPLAIN` 명령사용
```sql
explain
select e.emp_no, e.first_name
from employee e, salaries s
where e.emp_no = s.emp_no
limit 10;
```

|id|select_type|table|type|key|key_len|ref|rows|extra|
|:---|---:|---:|---:|---:|---:|---:|---:|---|
|1|simple|e|index|ix_first_name|44||300584|using index|
|1|simple|s|inderef|primary|4|employees.e.emp_no|4||
- 표의 각 레코드는 쿼리 문장에서 사용된 테이블의 개수만큼 출력된다.
- 실행 순서는 위에서 아래로 표시된다. 출력된 실행 계획에서 위쪽에서 출력된 결과일 수록 부분이거나 먼저 접근한 테이블이고 아래쪽에 출력된 결과일수록 쿼리의 안쪽 부분 또는 나중에 접근한 테이블에 해당된다.
- 쿼리문장과 비교하면 알기 쉽다.
- id 컬럼
    - 하나의 SELECT 문장은 다시 1개 이상의 하위 SELECT를 포함할 수 있다.